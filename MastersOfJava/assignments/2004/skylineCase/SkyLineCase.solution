import java.util.ArrayList;
import java.util.List;

/**
 * SkyLineRenderer is responsible for rendering the skyline of a city.
 */
 
public class SkyLineRendererImpl implements SkyLineRenderer {

	private List myList=new ArrayList();

	/** clears the current set of buildings */
	public void clear() {		
		myList.clear();
	}

	/** 
	 * adds a building to the current set of buildings.
	 * Note that the buildings may be added in any order.
	 * @param b the building to add.
	 * @throws NullPointerException if the building is null. 
	 */
	public void addBuilding(Building b) {
		if (b==null) throw new NullPointerException("Cannot add a NULL building.");
		myList.add(b);
	}

	/** returns the start position of the horizon */
	private int getStart() {
		int i=Integer.MAX_VALUE;
		for (int t=0;t<myList.size();t++) {
			Building b=(Building)myList.get(t);
			if (b.getPosition()<i) i=b.getPosition();
		}
		return i;
	}

	/** returns the end position of the horizon */
	private int getEnd() {
		int i=0;
		for (int t=0;t<myList.size();t++) {
			Building b=(Building)myList.get(t);
			if (b.getPosition()+b.getWidth()-1>i) {
				i=b.getPosition()+b.getWidth()-1;
			} 
		}
		return i;
	}

	/** returns the height at the specified position */
	private int getHeightAt(int w) {
		int i=0;
		for (int t=0;t<myList.size();t++) {
			Building b=(Building)myList.get(t);
			int start=b.getPosition();
			int end=b.getPosition()+b.getWidth()-1;
			if ((w>=start)&&(w<=end)) {
				if (b.getHeight()>i) i=b.getHeight();
			}
		}
		return i;
	}


	/**
	 * returns the skyline as defined by the buildings. 
	 * @return an array of Nodes which describe the skyline from left to right.
	 *         If there are no buildings an empty array should be returned. 
	 */
	public Node[] getSkyLine() {
		if (myList.size()==0) return new Node[0];
		//
		int start=getStart();
		int end=getEnd();
		List nodes=new ArrayList();
		//
		// Scan over the horizon, inserting nodes at height differences.
		//
		for (int t=start-1;t<=end+1;t++) {
			int prevHeight=getHeightAt(t-1);
			int height=getHeightAt(t);
			int nextHeight=getHeightAt(t+1);
			// Ascending
			if (height>prevHeight) {
				nodes.add(new Node(t,prevHeight));
				nodes.add(new Node(t,height));
			} 
			// Descending
			if (height>nextHeight) {
				nodes.add(new Node(t,height));
				nodes.add(new Node(t,nextHeight));
			}
		}
		//
		return (Node[])nodes.toArray(new Node[nodes.size()]);
	}


}
