/**	De oplossing.
	
	Laat Tn de snelste tijd om de rivier met n mannetjes over te steken zijn.
	
	dan Tn+2 <= Tn + 7 + n , voor n > 3, (T1=1,T2=2,T3=6)
	
	Namelijk laat eerst 1..n oversteken volgens de snelste tijd Tn.
	vervolgens loopt 1 terug, gaan n+1,n+2 naar de overkant, rent 2 terug en gaan 1,2 samen naar de rest.
	Door deze actie neemt de tijd met n + 7 toe.
	
	
	Voor de snelste oversteek geldt het volgende :
	1) Voor het mannetje dat alleen terugloopt kan altijd de snelste worden genomen.
	   ( Dus als 3,5,8 al over zijn dan loopt 3 terug en niet 8 ofzo. )
	
	2) De mannetjes die in hun eentje teruglopen zijn altijd of 1 of 2.
	
	3) Mannetjes N loopt met mannete N-1, N-2 met N-3 enzovoort.
	
	Bewijs van 1) 
	Stel dat we ventje x of y terugkunnen laten lopen met x < y 
	stel mannetje y loopt alleen terug , we hebben dan minstens y minuten nodig om y weer terug 
	te krijgen. bij mannetje x is dat slechts x minuten.
	
	2) Laat mannetje x het eerste mannetje zijn die terugloopt met x>=3 
	   Laat mannetje p en q met p>q de mannetjes zijn die het laatst zijn overgestoken.
	   
	   De situatie in de laatste twee beurten is aldus :
	   ----- (p,q)----->
	   <------ x -------
	   
	
	Bekijk nu de volgende oversteken 
	
	   ------(1,2)----->
	   <------(1)-------
	   ----- (p,q)----->
	   <------ 2 -------
	
	Het verschil met beide situaties is dat bij de eerste mannetje x staat en bij de tweede niet.
	De extra tijd om x terug en heen te laten lopen is minstens 2x en omdat x >= 3 weegt dit op tegen 
	de 5 minuten in de tweede situatie.
	
	3) mag je zelf doen.
	
	Zie ook:
	http://www.research.att.com/~njas/sequences/?q=1%2C2%2C6%2C11%2C16&sort=0&fmt=0&language=english
*/

public class RiverCrossingImpl {

	/**
	 * Tn+2 = Tn + 7 + n ; n>=4,
	 */ 
	public int getTime(int n) {
		// Invalid values.
		if (n<=0) return 0;
		//
		switch (n) {
			// If there is only one person, he can just walk over the bridge.
			case 1: return 1;
			// If there are two persons, they can walk over the bridge together.
			case 2: return 2;
			// With three, 1,2 walk over the bridge. one returns. 1,3 walk over the bridge.
			case 3: return 6;
			// For more use the formula.
			default: return 7 + (n - 2) + getTime(n - 2);
		}
	}
}
	
