import java.awt.Color;

public class JindianaJonesImpl {

    /** a good color to use for marking */
    private static final Color GOOD=Color.CYAN;
    /** also a good color to use for marking */
    private static final Color BAD=Color.BLUE;    
    /**
     * Find the treasure, takes it, returns to the exit and leaves.  
     * @param visitor to interact with the maze.
     */
    public void findAndLeaveWithTreasure(MazeVisitor visitor) {
        //
        // 1) Find the Treasure
        //
        findTreasure(visitor);
        //
        // 2) Take the treasure
        //
        Object treasure=visitor.getTreasure();
        //
        // 3) return to the exit.
        //
        returnToExit(visitor);
        //
        // 4) Leave
        //
        visitor.leave(treasure);
        //
    }
    
    public void findTreasure(MazeVisitor v) {
    	//
        // Indicates if an exit has been found from this location.
        //
        boolean exit=true;
        while (!v.hasTreasure()&&exit) {
            exit=false;
            //
            // Look for undiscovered passages.
            //
            for (Exit e:Exit.values()) {
                if (v.isFree(e)&&(v.getMark(e).equals(Color.BLACK))) {
                    v.setMark(GOOD);
                    v.move(e);
                    exit=true;
                    break;
                }
            }
            //
            // If we did not find an undiscovered passage, backtrack.            
            //
            if (!exit) {
                for (Exit e:Exit.values()) {
                	//
                    // When backtracking always move counter clockwise.
                    //
                    e=e.opposite();
                    if (v.isFree(e)&&(v.getMark(e).equals(GOOD))) {
                        v.setMark(BAD);
                        v.move(e);
                        exit=true;
                        break;
                    }
                }
            }
        }
    }
    
    public void returnToExit(MazeVisitor v) {
    	//
        // To find the exit once again do some more backtracking.
        //
        while (!v.isExit()) {
            for (Exit e:Exit.values()) {
            	//
                // When backtracking always move counter clockwise.
                //
                e=e.opposite();
                if (v.isFree(e)&&(v.getMark(e).equals(GOOD))) {
                    v.setMark(BAD);
                    v.move(e);
                    break;
                }
            }
        }    
    }

}
