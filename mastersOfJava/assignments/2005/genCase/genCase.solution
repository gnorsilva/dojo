

/**
 * 
 */
public class GeneticAnalyserImpl implements GeneticAnalyser {

	private String beginMarker;
	private String endMarker;
	
	private String dna;

	private int pos;

	public GeneticAnalyserImpl() {
	}
	
    public void setRepeatBeginSequence(String begin) {
		beginMarker=begin;
    }
	public void setRepeatEndSequence(String end) {
		endMarker=end;
	}

	
	public void setDna(String dna) {
		this.dna=dna;
		pos=0;
	}

	public boolean hasNext() {
		//
		return (pos<dna.length());
		//
	}
	
	public GeneticResult next() {
		//
		if (dna.startsWith(beginMarker,pos)) {
			//
			int nxt=dna.indexOf(endMarker,pos);
			String tmp=dna.substring(pos+beginMarker.length(),nxt);
			//
			int repeats=findRepeats(tmp);
			//
			pos=nxt+endMarker.length();
			return GeneticResult.createRepeat(repeats,tmp.substring(0,tmp.length()/repeats));
			//
		} else {
			//
			int nxt=dna.indexOf(beginMarker,pos);
			if (nxt<0) nxt=dna.length();
			String tmp=dna.substring(pos,nxt);			
			pos=nxt;
			return GeneticResult.createRandom(tmp);
			//			
		}
		//
	}
	
	private int findRepeats(String tmp) {
		if (tmp.length()<=2) return 1;
		int good=1;
		for (int t=tmp.length()-1;t>=2;t--) {
			int cnt=0;
			String sub=tmp.substring(0,t);
			StringBuffer sb=new StringBuffer();
			while (sb.length()<tmp.length()) { 
				sb.append(sub);
				cnt++;
			}
			if (sb.toString().equals(tmp)) {
				good=cnt;
			} 
		}
		return good;
	}

}
